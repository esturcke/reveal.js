#!/usr/bin/perl

use 5.010;
use warnings;
use strict;

use FindBin;
use Pod::Usage;
use Getopt::Long;
use Template;
use File::Monitor;
use Cwd qw/abs_path/;

my $template  = "$FindBin::RealBin/slides.tt";
my $support   = "$FindBin::RealBin/../{lib,js,plugin,css}";
my @watch     = "$FindBin::RealBin/../css/theme/promenade.css";
my $directory = "./slides/";
my $verbose;
my $watch;

GetOptions(
    'help|?'      => sub { pod2usage(1) },
    'man'         => sub { pod2usage( { -verbose => 2, -noperldoc => 1 } ) },
    'verbose'     => \$verbose,
    'watch'       => \$watch,
    'directory=s' => \$directory,
    'template=s'  => \$template,
) or pod2usage(2);

# get file name
my ($file) = @ARGV or pod2usage(2);

# process once
process();

# continue to process if in watch mode
if ($watch) {
    my $monitor = File::Monitor->new();
    $monitor->watch($file);
    $monitor->watch($_) for @watch;
    $monitor->scan;
    while (1) {
        sleep 1;
        process() if $monitor->scan;
    }
}

sub process {
    say "Processing..." if $verbose;

    # open source file
    open my $fh, '<', $file or die "Failed to open $file: $!";

    # two blank lines separate slides
    my @slides = split /\n{3,}/, join "", <$fh>;

    # honor line breaks
    s/\n/  \n/g for @slides;

    # process template
    my $tt = Template->new({ ABSOLUTE => 1 });
    $tt->process($template, {
        slides => \@slides,
    }, "$directory/index.html") || die $tt->error();

    # copy support files
    `rsync -v -r $support $directory`;
}

__END__

=head1 NAME

  reveal - Markdown to reveal.js presentation processor  

=head1 SYNOPSIS

  reveal [file]
  reveal [file] -d [outdir]
  reveal [file] -t [template]  
  reveal [file] --watch

=head1 OPTIONS

=over 8

=item B<-directory>

Target directory to write presentation files to. The current directory will be used if none is specified.

=item B<-template>

Template file to use. If none is specified, slides.tt in the directory where this script is will be used.

=item B<-verbose>

Verbose output will be sent to STDOUT.

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read the given input file and create a reveal.js 
presentation in the current or specified directly. 

=head1 AUTHOR

Erik J. Sturcke

=cut
